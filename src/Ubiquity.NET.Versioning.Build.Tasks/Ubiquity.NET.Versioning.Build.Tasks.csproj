<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <!-- This "package" is Consumed by MSBuild in VS which only builds on .NET Framework -->
        <TargetFrameworks>netstandard2.0;net48</TargetFrameworks>
        <LangVersion>13</LangVersion>
        <Nullable>enable</Nullable>

        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Authors>UbiquityDotNET</Authors>
        <Copyright>Copyright (C) 2017-2025, Ubiquity.NET Contributors</Copyright>
        <Title>CSemVer Build version generator for MSBuild based builds</Title>
        <Description>Automatic build versioning with support for consistent build versioning across developer builds, CI builds and official release builds.</Description>
        <LicenseUrl>https://github.com/UbiquityDotNET/CSemVer.GitBuild/blob/master/LICENSE</LicenseUrl>
        <PackageProjectUrl>https://github.com/UbiquityDotNET/CSemVer.GitBuild</PackageProjectUrl>
        <RepositoryUrl>https://github.com/UbiquityDotNET/CSemVer.GitBuild</RepositoryUrl>
        <RepositoryType>GitHub</RepositoryType>
        <PackageTags>CSemVer;CI;SemVer</PackageTags>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <!-- [NU5100] By design, tasks are NOT placed in the "lib" folder of the package -->
        <NoWarn>NU5100</NoWarn>
        <PackageReadmeFile>ReadMe.md</PackageReadmeFile>
        <!-- Set output assembly into the "tasks" folder so it is usable as a "task"-->
        <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
        <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>

        <!--
        Explicitly declaring no docs for this build only assembly. Even though it is used by consumers there
        is no API for them to call, and therefore nothing to  document, only the task itself is documented
        (and that is pure markdown).
        -->
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
    </PropertyGroup>

    <!--
    // NOTE:
    //  Due to constraints, limitations and general issues with MSBUILD Tasks and dependency resolution
    //  this must NOT have any dependencies beyond MSBUILD itself, and therefore, does it all locally.
    //  This is not as complete as what is offered in the Ubiquity.NET.Versioning library but enables
    //  the tasks to function with the least of changes to the consumer (Update to package name and
    //  version, gets updated/corrected version)
    //
    // For gory details of the problems of creating a task with dependencies
    // See: https://natemcmaster.com/blog/2017/11/11/msbuild-task-with-dependencies/
    //
    // Note that there is a problem with the recommendation Nate makes in that a console tool
    // has additional dependency concerns with the runtime identifier and or the framework
    // runtime needed to run it. If it's .NET or something else the supporting runtime and
    // the RID version is needed to execute it. So this just builds a task that is constrained
    // only by the requirements of MSBUILD itself.
    -->
    <ItemGroup>
        <PackageReference Include="Microsoft.Build.Framework" PrivateAssets="All" />
        <PackageReference Include="Microsoft.Build.Utilities.Core" PrivateAssets="All" />
        <PackageReference Include="PolySharp">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <ItemGroup>
        <Content Include="PackageReadMe.md" PackagePath="ReadMe.md" />
        <Content Include="build\**" PackagePath="build" />
        <Content Include="buildMultiTargeting\**" PackagePath="buildMultiTargeting" />
    </ItemGroup>
</Project>
