<Project>
    <UsingTask Condition="'$(RoslynCodeTaskFactory)'!=''" TaskName="CreateVersionInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(RoslynCodeTaskFactory)">
        <ParameterGroup>
            <BuildMajor Required="true" />
            <BuildMinor Required="true" />
            <BuildPatch Required="true" />
            <CiBuildName />
            <CiBuildIndex />
            <PreReleaseName />
            <PreReleaseNumber />
            <PreReleaseFix />
            <BuildMeta />
            <SemVer Output="true" />
            <FileVersionMajor Output="true" />
            <FileVersionMinor Output="true" />
            <FileVersionBuild Output="true" />
            <FileVersionRevision Output="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Diagnostics.Tools"/>
            <Reference Include="System.Text.RegularExpressions"/>
            <Reference Include="System.Runtime.Extensions"/>
            <Code Type="Class" Source="$(MSBuildThisFileDirectory)InlineTasks.cs" />
        </Task>
    </UsingTask>
    <UsingTask Condition="'$(RoslynCodeTaskFactory)'!=''" TaskName="GetBuildIndexFromTime" TaskFactory="CodeTaskFactory" AssemblyFile="$(RoslynCodeTaskFactory)">
        <ParameterGroup>
            <TimeStamp ParameterType="System.DateTime" Required="true" />
            <BuildIndex Output="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Fragment" Language="cs">
<![CDATA[
            var timeStamp = TimeStamp.ToUniversalTime( );
            var midnightTodayUtc = new DateTime( timeStamp.Year, timeStamp.Month, timeStamp.Day, 0, 0, 0, DateTimeKind.Utc );
            var baseDate = new DateTime( 2000, 1, 1, 0, 0, 0, DateTimeKind.Utc );
            uint buildNumber = ( ( uint )( timeStamp - baseDate ).Days ) << 16;
            buildNumber += ( ushort )( ( timeStamp - midnightTodayUtc ).TotalSeconds / 2 );
            BuildIndex = buildNumber.ToString();
]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask Condition="'$(RoslynCodeTaskFactory)'!=''" TaskName="ParseBuildVersionXml" TaskFactory="CodeTaskFactory" AssemblyFile="$(RoslynCodeTaskFactory)">
        <ParameterGroup>
            <BuildVersionXml Required="true"/>
            <BuildMajor Output="true"/>
            <BuildMinor Output="true"/>
            <BuildPatch Output="true"/>
            <PreReleaseName Output="true"/>
            <PreReleaseNumber Output="true"/>
            <PreReleaseFix Output="true"/>
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml.ReaderWriter"/>
            <Reference Include="System.Xml.XDocument"/>
            <Using Namespace="System"/>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
<![CDATA[
            using( var stream = File.OpenText( BuildVersionXml ) )
            {
                var xdoc = System.Xml.Linq.XDocument.Load( stream, System.Xml.Linq.LoadOptions.None );
                var data = xdoc.Element( "BuildVersionData" );

                foreach( var attrib in data.Attributes( ) )
                {
                    switch( attrib.Name.LocalName )
                    {
                    case "BuildMajor":
                        BuildMajor = attrib.Value;
                        break;

                    case "BuildMinor":
                        BuildMinor = attrib.Value;
                        break;

                    case "BuildPatch":
                        BuildPatch = attrib.Value;
                        break;

                    case "PreReleaseName":
                        PreReleaseName = attrib.Value;
                        break;

                    case "PreReleaseNumber":
                        PreReleaseNumber = attrib.Value;
                        break;

                    case "PreReleaseFix":
                        PreReleaseFix = attrib.Value;
                        break;

                    default:
                        Log.LogWarning("Unexpected attribute {0}", attrib.Name.LocalName);
                        break;
                    }
                }

                // correct malformed values
                if( string.IsNullOrWhiteSpace( PreReleaseName ) )
                {
                    PreReleaseNumber = "0";
                    PreReleaseFix = "0";
                }

                if( PreReleaseNumber == "0" )
                {
                    PreReleaseFix = "0";
                }
            }
]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="PrepareVersioningForBuild"
            BeforeTargets="PrepareForBuild;Restore;_IntermediatePack"
            DependsOnTargets="GetRepositoryInfo;VerifyProvidedBuildVersion;SetVersionDependentProperties;"
            />

    <Target Name="GetRepositoryInfo">
        <GetBuildIndexFromTime Condition="'$(CiBuildIndex)'==''"
                               TimeStamp="$(BuildTime)"
                               >
            <Output TaskParameter="BuildIndex" PropertyName="CiBuildIndex"/>
        </GetBuildIndexFromTime>

        <ParseBuildVersionXml Condition="'$(BuildMajor)'==''"
                              BuildVersionXml="$(BuildVersionXml)"
                              >
            <Output TaskParameter="BuildMajor" PropertyName="BuildMajor"/>
            <Output TaskParameter="BuildMinor" PropertyName="BuildMinor"/>
            <Output TaskParameter="BuildPatch" PropertyName="BuildPatch"/>
            <Output TaskParameter="PreReleaseName" PropertyName="PreReleaseName" />
            <Output TaskParameter="PreReleaseNumber" PropertyName="PreReleaseNumber" />
            <Output TaskParameter="PreReleaseFix" PropertyName="PreReleaseFix" />
        </ParseBuildVersionXml>

        <!-- If FullBuildNumber not provided then generate version numbers/parts -->
        <CreateVersionInfo Condition ="'$(FullBuildNumber)'==''"
                           BuildMajor = "$(BuildMajor)"
                           BuildMinor = "$(BuildMinor)"
                           BuildPatch = "$(BuildPatch)"
                           PreReleaseName = "$(PreReleaseName)"
                           PreReleaseNumber = "$(PreReleaseNumber)"
                           PreReleaseFix = "$(PreReleaseFix)"
                           CiBuildName = "$(CiBuildName)"
                           CiBuildIndex = "$(CiBuildIndex)"
                           BuildMeta = "$(BuildMeta)"
                           >
            <Output TaskParameter="SemVer" PropertyName="FullBuildNumber" />
            <Output TaskParameter="FileVersionMajor" PropertyName="FileVersionMajor" />
            <Output TaskParameter="FileVersionMinor" PropertyName="FileVersionMinor" />
            <Output TaskParameter="FileVersionBuild" PropertyName="FileVersionBuild" />
            <Output TaskParameter="FileVersionRevision" PropertyName="FileVersionRevision" />
            <Output TaskParameter="SemVer" PropertyName="PackageVersion"/>
        </CreateVersionInfo>
    </Target>

    <Target Name="SetVersionDependentProperties">
        <PropertyGroup>
            <FileVersion Condition="'$(FileVersion)'==''">$(FileVersionMajor).$(FileVersionMinor).$(FileVersionBuild).$(FileVersionRevision)</FileVersion>
            <AssemblyVersion>$(FileVersion)</AssemblyVersion>
            <InformationalVersion>$(FullBuildNumber)</InformationalVersion>
        </PropertyGroup>
    </Target>

    <Target Name="VerifyProvidedBuildVersion" Condition="'$(FullBuildNumber)'!=''" >
        <Error Condition="'$(FileVersionMajor)'==''" Text="FileVersionMajor property not found"/>
        <Error Condition="'$(FileVersionMinor)'==''" Text="FileVersionMinor property not found"/>
        <Error Condition="'$(FileVersionRevision)'==''" Text="FileVersionRevision property not found"/>
        <Error Condition="'$(PackageVersion)'==''" Text="PackageVersion property not found"/>
    </Target>

    <!-- Generates include header for native code Win32 Resource (.RC) -->
    <Target Name="GenerateVesionInfoHeader"
            Condition="'$(MSBuildProjectExtension)'=='.vcxproj'"
            BeforeTargets="ResourceCompile"
            >
        <ItemGroup>
            <VersionInfoGeneratedLine Include='#define FILE_VERSION_MAJOR $(FileVersionMajor)'/>
            <VersionInfoGeneratedLine Include='#define FILE_VERSION_MINOR $(FileVersionMinor)'/>
            <VersionInfoGeneratedLine Include='#define FILE_VERSION_BUILD $(FileVersionBuild)'/>
            <VersionInfoGeneratedLine Include='#define FILE_VERSION_REVISION $(FileVersionRevision)'/>
            <VersionInfoGeneratedLine Include='#define FILE_VERSION_STRING "$(FileVersion)"'/>
            <VersionInfoGeneratedLine Include=' '/>
            <VersionInfoGeneratedLine Include='#define PRODUCT_VERSION_MAJOR $(FileVersionMajor)'/>
            <VersionInfoGeneratedLine Include='#define PRODUCT_VERSION_MINOR $(FileVersionMinor)'/>
            <VersionInfoGeneratedLine Include='#define PRODUCT_VERSION_BUILD $(FileVersionBuild)'/>
            <VersionInfoGeneratedLine Include='#define PRODUCT_VERSION_REVISION $(FileVersionRevision)'/>
            <VersionInfoGeneratedLine Include='#define PRODUCT_VERSION_STRING "$(FileVersion)"'/>
        </ItemGroup>
        <Message Importance="high" Text="Generating $(GeneratedVersionInfoHeader)" />
        <WriteLinesToFile File="$(IntermediateOutputPath)$(GeneratedVersionInfoHeader)" Overwrite="true" Lines="@(VersionInfoGeneratedLine)" />
    </Target>

    <!-- Generate a C# source file with Assembly and file version attributes and include it in the compilation -->
    <!-- For legacy projects only, this functionality is built into the new CPS based CSproj files -->
    <Target Name="GenerateAssemblyVersionInfoCS"
            Condition="'$(MSBuildProjectExtension)'=='.csproj' AND '$(GenerateAssemblyInfo)'==''"
            BeforeTargets="CoreCompile"
            >
        <ItemGroup>
            <AssemblyVersionInfoGeneratedLine Include="using System.Reflection%3B"/>
            <AssemblyVersionInfoGeneratedLine Include='[assembly: AssemblyVersion("$(FileVersionMajor).$(FileVersionMinor).$(FileVersionBuild).$(FileVersionRevision)")]'/>
            <AssemblyVersionInfoGeneratedLine Include='[assembly: AssemblyFileVersion("$(FileVersionMajor).$(FileVersionMinor).$(FileVersionBuild).$(FileVersionRevision)")]'/>
            <AssemblyVersionInfoGeneratedLine Include='[assembly: AssemblyInformationalVersion("$(FullBuildNumber)")]'/>
        </ItemGroup>
        <Message Importance="high" Text="Generating: $(IntermediateOutputPath)AssemblyVersionInfo.cs" />
        <WriteLinesToFile File="$(IntermediateOutputPath)AssemblyVersionInfo.cs" Overwrite="true" Lines="@(AssemblyVersionInfoGeneratedLine)" />
        <ItemGroup>
            <Compile Include="$(IntermediateOutputPath)AssemblyVersionInfo.cs"/>
        </ItemGroup>
    </Target>

    <Target Name="ShowBuildParams" BeforeTargets="Build;Pack">
        <Message Importance="High" Text="FullBuildNumber: $(FullBuildNumber)"/>
        <Message Importance="High" Text=" PackageVersion: $(PackageVersion)"/>
        <Message Importance="High" Text="    FileVersion: $(FileVersion)"/>
    </Target>
</Project>
